{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
//!Test
	"Yev testExport": {
		"prefix": "tes",
		"body": ["module.exports = {${1:Funciones}};",
		],
		"description": "Test Export"
	},

	"Yev testImport": {
		"prefix": "tes",
		"body": ["const {${1:Funciones}} = require('${2:Archivo}');",
			"describe('${1:Funciones}', () => {",
			"\ttest('${3:Nombre representativo del test}', () => {",
			"\t\tconst expected = ${4};",
			"\t\tconst result = ${5};",
			"\t\texpect(result).toBe(expected);",
			"\t})",
			"})",
		],
		"description": "Test Export"
	},

//!Conexiones
	//Conexión con servidor
	"Yev xhr": {
		"prefix": "xhr",
		"body": ["let xhr = new XMLHttpRequest();",
			"const url = '${1}';",
			"xhr.addEventListener('readystatechange', function(){",
			"\tif(this.readyState !== 4) return;",
			"\tif (this.status >= 200 && this.status < 300) {",
			"\t\t${2}",
			"\t}",
			"})",
			"xhr.open('GET', url, true);",
			"xhr.send();"
		],
		"description": "XHR"
	},
	"Yev xhrPost": {
		"prefix": "xhr",
		"body": ["let xhr = new XMLHttpRequest();",
			"const url = '${1}';",
			"xhr.addEventListener('readystatechange', function(){",
			"\tif(this.readyState !== 4) return;",
			"\tif (this.status >= 200 && this.status < 300) {",
			"\t\t${2}",
			"\t}",
			"})",
			"xhr.open('POST', url, true);",
			"xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');",
			"xhr.send(${3://lo que enviamos});",
		],
		"description": "XHR"
	},

	//Conexión entre archivos
	"Yev importFun": {
		"prefix": "imp",
		"body": ["import {${1:Funciones}} from '${2:Ruta}'",
		],
		"description": "Funcion this"
	},

	"Yev importAll": {
		"prefix": "impo",
		"body": ["import * as {${1:Alias}} from '${2:Ruta}'",
		],
		"description": "Funcion this"
	},

	"Yev importTodo": {
		"prefix": "ex",
		"body": ["export ",
		],
		"description": "Export"
	},
	
	//Conexiones asíncronas
	"Yev async": {
		"prefix": "as",
		"body": ["async () => {",
			"\t${1}",
			"}",
		],
		"description": "Async"
	},

	"Yev await": {
		"prefix": "aw",
		"body": ["await "
		],
		"description": "await"
	},

	"Yev Promise": {
		"prefix": "prom",
		"body": ["return new Promise((resolve, reject) => {",
			"\t${1://Instrucción que devolverá si todo va bien}",
			"\tresolve(v${2:arQueDevolverá si todo va bien});",
			"\t${3://Instrucción que devolverá si todo va mal}",
			"\treject(${4:varQueDevolverá si todo va ma}l);",
			"})"
		],
		"description": "Promise"
	},


//!OOP
	"Yev this": {
		"prefix": "thi",
		"body": ["this.${1}",
		],
		"description": "Funcion this"
	},

	"Yev constructor": {
		"prefix": "cons",
		"body": ["constructor(${1}){",
			"this.${2}",
			"}"
		],
		"description": "Funcion constructor"
	},

	"Yev document": {
		"prefix": "d",
		"body": ["document.",
		],
		"description": "Objeto Document"
	},

	//HTMLGeneral -> Selección -> Búsqueda
	"Yev document.getElementByID": {
		"prefix": "gete",
		"body": ["document.getElementById('${1}');",
		],
		"description": "Buscar DOM por ID"
	},

	"Yev document.getElementsByName": {
		"prefix": "getel",
		"body": ["document.getElementsByName('${1}')${2:[0]};",
		],
		"description": "Buscar DOM por Name"
	},

	"Yev document.getElementsByTagName": {
		"prefix": "getel",
		"body": ["document.getElementsByTagName('${1}')${2:[0]};",
		],
		"description": "Buscar DOM por TagName"
	},

	"Yev document.querySelector": {
		"prefix": "qu",
		"body": ["document.querySelector('${1}');",
		],
		"description": "Buscar DOM por Selector CSS"
	},

	"Yev document.querySelectorAll": {
		"prefix": "que",
		"body": ["document.querySelectorAll('${1}')${2:[0]};",
		],
		"description": "Buscar DOM por Selector CSS"
	},

	"Yev Forms": {
		"prefix": "form",
		"body": ["document.forms${1:[0]};",
		],
		"description": "Buscar DOM por Form"
	},
	
	//HTMLGeneral -> Selección -> Nodos
	"Yev childNodes": {
		"prefix": "chil",
		"body": ["childNodes;${1: //Devuelve Arr con #text}",
		],
		"description": "Seleccionar elementos hijos"
	},

	"Yev children": {
		"prefix": "chi",
		"body": ["children;${1: //Devuelve Obj sin #text}",
		],
		"description": "Seleccionar elementos hijos"
	},

	"Yev firstElementChild": {
		"prefix": "fir",
		"body": ["firstElementChild;",
		],
		"description": "Seleccionar primer elemento hijo"
	},

	"Yev lastElementChild": {
		"prefix": "las",
		"body": ["lastElementChild;",
		],
		"description": "Seleccionar último elemento hijo"
	},
	"Yev firstChild": {
		"prefix": "firs",
		"body": ["firstChild;",

		],
		"description": "Seleccionar primer hijo"
	},

	"Yev lastChild": {
		"prefix": "last",
		"body": ["lastChild;",
		],
		"description": "Seleccionar último hijo"
	},

	"Yev nextSibling": {
		"prefix": "next",
		"body": ["nextSibling;${1: //Puede devolver #text}",
		],
		"description": "Seleccionar el siguiente hermano"
	},

	"Yev previousSibling": {
		"prefix": "next",
		"body": ["previousSibling;${1: //Puede devolver #text}",
		],
		"description": "Seleccionar el anterior hermano"
	},

	"Yev nextElementSibling": {
		"prefix": "next",
		"body": ["nextElementSibling;",
		],
		"description": "Seleccionar el siguiente elemento hermano"
	},

	"Yev previousElementSibling": {
		"prefix": "next",
		"body": ["previousElementSibling;",
		],
		"description": "Seleccionar el anterior elemento hermano"
	},

	"Yev parentNode": {
		"prefix": "par",
		"body": ["parentNode;${1: //Puede devolver #text}",
		],
		"description": "Seleccionar padre"
	},

	"Yev innerHTML": {
		"prefix": "inn",
		"body": ["innerHTML;",
		],
		"description": "Selecciona y escribe lo que hay dentro de un elemento"
	},

	"Yev outerHTML": {
		"prefix": "out",
		"body": ["outerHTML;",
		],
		"description": "Selecciona y escribe lo que hay dentro de un elemento y el elemento"
	},

	"Yev textContent": {
		"prefix": "tex",
		"body": ["textContent;${1: //Selecciona contenido elemento, evitando etiquetas HTML}",
		],
		"description": "Selecciona contenido elemento, evitando etiquetas HTML"
	},

	"Yev nodeName": {
		"prefix": "nod",
		"body": ["nodeName;${1: //Ver de qué tipo es el elemento}",
		],
		"description": "Ver de qué tipo es el elemento"
	},

	"Yev attributes": {
		"prefix": "att",
		"body": ["attributes;",
		],
		"description": "Ver y dar valor al tributo de un elemento"
	},

	"Yev nodeValue": {
		"prefix": "nodeV",
		"body": ["${1:atributo.}nodeValue;",
		],
		"description": "Cambiar valor al tributo de un elemento"
	},

	"Yev classList": {
		"prefix": "cla",
		"body": ["classList;",
		],
		"description": "Acceder a la lista de clases de un elemento"
	},

	"Yev classList Add": {
		"prefix": "clas",
		"body": ["classList.add('.${1}');",
		],
		"description": "Añade a la lista de clases de un elemento"
	},

	"Yev classList Remove": {
		"prefix": "clas",
		"body": ["classList.remove('.${1}');",
		],
		"description": "Elimina de la lista de clases de un elemento"
	},
	
	//HTMLGeneral -> Eventos
	"Yev focus": {
		"prefix": "foc",
		"body": ["focus();",
		],
		"description": "Pone el foco en el elemento"
	},

	"Yev addEventListener": {
		"prefix": "add",
		"body": ["addEventListener('${1:evento}', () =>  {",
			"\t${2:función}",
			"});",
		],
		"description": "Añade evento a la escucha"
	},

	"Yev preventDefault": {
		"prefix": "e.p",
		"body": ["e.preventDefault();",
		],
		"description": "Prevenir que se dispare el evento"
	},

	"Yev target": {
		"prefix": "e.t",
		"body": ["e.target;",
		],
		"description": "Quién ha disparado el evento"
	},

	"Yev evento blur": {
		"prefix": "evbl",
		"body": ["blur",
		],
		"description": "Evento al quitar el foco"
	},
	
	//HTMLGeneral -> Estilos
	"Yev cssText": {
		"prefix": "css",
		"body": ["cssText",
		],
		"description": "Agregar estilo CSS en linea"
	},

	"Yev width": {
		"prefix": "wid",
		"body": ["width",
		],
		"description": "Agregar width en linea"
	},

	"Yev height": {
		"prefix": "hei",
		"body": ["height",
		],
		"description": "Agregar height en linea"
	},

	"Yev backgroundColor": {
		"prefix": "back",
		"body": ["backgroundColor",
		],
		"description": "Agregar backgroundColor en linea"
	},
	
	//HTMLGeneral -> Crear e insertar
	"Yev createElement": {
		"prefix": "cre",
		"body": ["document.createElement('${1}')",
		],
		"description": "Crea un elemento del DOM"
	},

	
	"Yev setAttribute": {
		"prefix": "cre",
		"body": ["setAttribute('${1:Attribute}, ${2:Value}')",
		],
		"description": "Añade atributo a un elemento del DOM"
	},
	
	"Yev createTextNode": {
		"prefix": "crea",
		"body": ["document.createTextNode('${1}')",
		],
		"description": "Crea un elemento tipo texto del DOM"
	},
	
	"Yev insertAdjacentHTML": {
		"prefix": "ins",
		"body": ["insertAdjacentHTML('beforeend', ${1:element});",
		],
		"description": "Inserta un elemento al DOM"
	},
	
	"Yev appendChild": {
		"prefix": "appe",
		"body": ["appendChild(${1:element});",
		],
		"description": "Inserta un elemento al DOM"
	},
	
	"Yev insertAfter": {
		"prefix": "inser",
		"body": ["insertAfter(${1:hermanoExistente}, ${2:hermanoNuevo});",
		],
		"description": "Inserta un elemento hermano al DOM"
	},
	
	"Yev insertBefore": {
		"prefix": "inser",
		"body": ["insertBefore(${1:hermanoExistente}, ${2:hermanoNuevo});",
		],
		"description": "Inserta un elemento hermano al DOM"
	},

	"Yev cloneNode": {
		"prefix": "inser",
		"body": ["cloneNode(${1:Deep Bool});",
		],
		"description": "Clona un elemento, si true clona también todo lo de dentro"
	},
	
	//HTMLGeneral -> Eliminar y reemplazar en
	"Yev removeChild": {
		"prefix": "rem",
		"body": ["removeChild(${1:elementoHijo});",
		],
		"description": "Elimina un Hijo del elemento del DOM"
	},

	"Yev replaceChild": {
		"prefix": "rep",
		"body": ["replaceChild(${1:elementoHijoExistente}, ${2:elementoHijoNuevo});",
		],
		"description": "Reemplaza un Hijo del elemento del DOM"
	},

	//HTMLFormulario -> General
	"Yev reset": {
		"prefix": "res",
		"body": ["reset();",
		],
		"description": "Resetea un formulario"
	},
	
	"Yev submit": {
		"prefix": "res",
		"body": ["submit(); //name botón siempre != submit",
		],
		"description": "Submit registros formulario"
	},

	//HTMLFormulario -> Inputs
	"Yev evento input": {
		"prefix": "evin",
		"body": ["input",
		],
		"description": "Evento intro información form"
	},
	
	"Yev evento change": {
		"prefix": "evch",
		"body": ["change",
		],
		"description": "Evento cambiar información form"
	},
	
	//HTMLFormulario -> APIform
	"Yev evento setCustomValidity": {
		"prefix": "setC",
		"body": ["setCustomValidity = '${1:Mensaje Personalizado}'",
		],
		"description": "Crear mensaje personalizado en error al intro info form"
	},
	
	"Yev evento invalid": {
		"prefix": "evin",
		"body": ["invalid",
		],
		"description": "Evento información invalida form"
	},
	
	//Ventanas y periféricos -> Ventana Explorador
	"Yev window": {
		"prefix": "w",
		"body": ["window.",
		],
		"description": "Objeto Window"
	},

	"Yev window.open": {
		"prefix": "ope",
		"body": ["window.open(URL, '${1:NombreInventado}', '${2:Config}')",
		],
		"description": "Window.opn"
	},

	"Yev window.close": {
		"prefix": "ope",
		"body": ["window.close()",
		],
		"description": "Window.close"
	},

	"Yev window.onload": {
		"prefix": "onl",
		"body": ["window.onload = () => {",
			"\t${1:Función}",
			"}",
		],
		"description": "Window.onload"
	},

	//Ventanas y periféricos -> Ratón
	"Yev evento click": {
		"prefix": "evcl",
		"body": ["click",
		],
		"description": "Evento al hacer click con el ratón"
	},

	"Yev button": {
		"prefix": "but",
		"body": ["e.button //{0, 1, 2} = {izq, centro, dcha}",
		],
		"description": "Botón del ratón que dispara el evento"
	},

	"Yev evento mouseover": {
		"prefix": "evmou",
		"body": ["mouseover",
		],
		"description": "Evento al hacer mouseover con el ratón"
	},

	"Yev evento mouseout": {
		"prefix": "evmou",
		"body": ["mouseout",
		],
		"description": "Evento al hacer mouseout con el ratón"
	},

	"Yev evento mousedown": {
		"prefix": "evmou",
		"body": ["mousedown",
		],
		"description": "Evento al hacer mousedown con el ratón"
	},

	"Yev evento mouseup": {
		"prefix": "evmou",
		"body": ["mouseup",
		],
		"description": "Evento al hacer mouseup con el ratón"
	},

	"Yev evento contextmenu": {
		"prefix": "evco",
		"body": ["contextmenu",
		],
		"description": "Evento al sacar el menú contextual"
	},

	//Ventanas y periféricos -> Ratón
	"Yev evento keydown": {
		"prefix": "evmou",
		"body": ["keydown",
		],
		"description": "Evento al hacer keydown con el teclado"
	},

	"Yev evento keyup": {
		"prefix": "evmou",
		"body": ["keyup",
		],
		"description": "Evento al hacer keyup con el teclado"
	},

	"Yev evento keypress": {
		"prefix": "evmou",
		"body": ["keypress",
		],
		"description": "Evento al hacer keypress con el teclado"
	},

	"Yev key": {
		"prefix": "ke",
		"body": ["e.key",
		],
		"description": "Botón del teclado que dispara el evento"
	},
	
	//URL
	"Yev evento hashchange": {
		"prefix": "evha",
		"body": ["hashchange",
		],
		"description": "Evento al cambiar la URL del navegador"
	},

//!Funciones
	"Yev typeof": {
		"prefix": "typ",
		"body": ["typeof ",
		],
		"description": "Funcion typeof"
	},

	"Yev isNaN": {
		"prefix": "isn",
		"body": ["isNaN(${1})",
		],
		"description": "Funcion para saber si es Not a Number"
	},

	"Yev Number": {
		"prefix": "isn",
		"body": ["Number(${1})",
		],
		"description": "Funcion para convertir a numero"
	},

	"Yev parseInt": {
		"prefix": "par",
		"body": ["parseInt(${1})",
		],
		"description": "Funcion para convertir a numero"
	},

	"Yev String": {
		"prefix": "str",
		"body": ["string(${1})",
		],
		"description": "Funcion para convertir a string"
	},

	"Yev Bool": {
		"prefix": "boo",
		"body": ["boolean(${1})",
		],
		"description": "Funcion para convertir a string"
	},

	//Para mandar escritos
	"Yev alert": {
		"prefix": "ale",
		"body": ["alert(${1});",
		],
		"description": "Funcion para sacar un alert"
	},

	"Yev console.log": {
		"prefix": "con",
		"body": ["console.log(${1});",
		],
		"description": "Funcion para mostrar rdo en consola"
	},

	"Yev document.write": {
		"prefix": "doc",
		"body": ["document.write(${1});",
		],
		"description": "Funcion para mostrar en XML"
	},

	//Para recibir escrito de
	"Yev prompt(cuadro de dialogo)": {
		"prefix": "pro",
		"body": ["promp(${1});",
		],
		"description": "Funcion para sacar prompt"
	},

	"Yev ${} (interpolación strings)": {
		"prefix": "$",
		"body": ["${${1}}",
		],
		"description": "Funcion para poner variable en string"
	},
	
	//Manejo de strings

	"Yev lenght": {
		"prefix": ".len",
		"body": [".length",
		],
		"description": "Funcion para sacar longitud"
	},

	"Yev indexOf": {
		"prefix": ".ind",
		"body": [".indexOf(${1:Valor buscado},${2:Posicion inicial})",
		],
		"description": "Funcion para sacar el indice a partir de la palabra"
	},

	"Yev charAt": {
		"prefix": ".cha",
		"body": [".indexOf(${1:Valor buscado},${2:Posicion inicial})",
		],
		"description": "Funcion para sacar la letra a partir del indice"
	},
	

	"Yev match": {
		"prefix": ".mat",
		"body": [".match(${1:Val a matchear})",
		],
		"description": "Funcion para saber si 2 srtings son iguales, usado con exp reg"
	},

	"Yev test": {
		"prefix": ".tes",
		"body": [".test(${1:Val a encontrar})",
		],
		"description": "Funcion para saber se encuentra la cadena, usado con exp reg"
	},

	"Yev toUpperCase": {
		"prefix": ".tou",
		"body": [".toUpperCase()",
		],
		"description": "Funcion poner string en mayuscula"
	},
	

	"Yev toLowerCase": {
		"prefix": ".tol",
		"body": [".toLowerCase()",
		],
		"description": "Funcion poner string en minuscula"
	},

	"Yev replace": {
		"prefix": ".rep",
		"body": [".replace(${1:Val a reemplazar},${2:Val por el que se reemplaza})",
		],
		"description": "Funcion para reemplazar strings"
	},

	"Yev substring": {
		"prefix": ".sub",
		"body": [".substring(${1:indice inical},${2:num cadenas desde indice de inicio donde i0 = 1})",
		],
		"description": "Funcion para sacar una cadena"
	},
	
	
	"Yev delimitador": {
		"prefix": "delim",
		"body": ["let delimitador = ' ';",
		],
		"description": "Complemento para split"
	},
	"Yev split": {
		"prefix": ".spl",
		"body": [".Split(${1:delimitador (snip = delim)})",
		],
		"description": "Funcion para dividir en un array el string"
	},
	
	//Manejo de arrays
	"Yev join": {
		"prefix": ".joi",
		"body": [".join(${1:','})",
		],
		"description": "Funcion para imprimir indices array en bonito"
	},

	"Yev findindex": {
		"prefix": ".fin",
		"body": [".findindex(e => e ${1:>/</==} ${2:eBuscada})",
		],
		"description": "Funcion para buscar el indice de la expresion buscada"
	},

	"Yev filter": {
		"prefix": ".fin",
		"body": [".filter(e => e ${1:>/</==} ${2:eBuscada})",
		],
		"description": "Funcion para filtrar la expresion buscada"
	},

	"Yev every": {
		"prefix": ".eve",
		"body": [".every(e => {return e ${1:>/</==} ${2:eBuscada}})",
		],
		"description": "Funcion para devolver si todos los elementos cumplen una condición"
	},

	"Yev some": {
		"prefix": ".som",
		"body": [".some(e => {return e ${1:>/</==} ${2:eBuscada}})",
		],
		"description": "Funcion para devolver si algunos los elementos cumplen una condición"
	},

	"Yev unshift": {
		"prefix": ".uns",
		"body": [".unshift(${1:valor a añadir al principio})",
		],
		"description": "Funcion añadir un val al principio del array"
	},

	"Yev push": {
		"prefix": ".pu",
		"body": [".push(${1:elemento})",
		],
		"description": "Funcion para añadir val al final del array"
	},

	"Yev shift": {
		"prefix": ".shi",
		"body": [".shift()",
		],
		"description": "Funcion para eliminar val al principio del array"
	},

	"Yev pop": {
		"prefix": ".po",
		"body": [".pop()",
		],
		"description": "Funcion para eliminar val al final del array"
	},

	"Yev concat": {
		"prefix": ".con",
		"body": [".concat(${1:Array a concatenar})",
		],
		"description": "Funcion para añadir array2 al final del array1"
	},

	"Yev delete": {
		"prefix": "del",
		"body": ["delete ${1:Array}[${2:posicion}]",
		],
		"description": "Funcion para elmininar un indice del array"
	},

	"Yev comparar": {
		"prefix": "comp",
		"body": ["function comparar(a, b){return a - b}",
		],
		"description": "Funcion para añadir al sort y comparar numeros"
	},
	"Yev sort": {
		"prefix": ".sor",
		"body": [".sort(${1:ordena por ASCI (snip = comp ordenar num)})",
		],
		"description": "Funcion para añadir array2 al final del array1"
	},

	"Yev reverse": {
		"prefix": ".rev",
		"body": [".reverse()",
		],
		"description": "Funcion poner el array al reves"
	},

	"Yev slice": {
		"prefix": ".sli",
		"body": [".slice(${1:indice inicial (si (-) Empezamos por la dcha)}, ${2:incide final (si (-) Empezamos por la dcha)})",
		],
		"description": "Funcion para sacar un subarray"
	},

	"Yev splice": {
		"prefix": ".spli",
		"body": [".splice(${1:indie inicial}, ${2:num indices a borrar}${3:, }${4:var a instertar})",
		],
		"description": "Funcion para concetar al array otras variables (tambien puede elminar indices del original)"
	},

	"Yev map": {
		"prefix": ".ma",
		"body": [".map(function(${1:valor}){",
			"\t${2:// Instrucción}",
			"\t${3:return valor}",
			"})"
		],
		"description": "Funcion para pasar por un funcion cada elemento del array"
	},

	"Yev flat": {
		"prefix": ".fl",
		"body": [".flat(${1:dimensiones})",],
		"description": "Funcion aplanar un array"
	},
	
	//Manejo de objetos
	"Yev keys": {
		"prefix": "key",
		"body": ["let keys{1:Objeto} = Object.key(${1:objeto})",],
		"description": "Funcion para sacar las claves del objeto"
	},

	"Yev values": {
		"prefix": "val",
		"body": ["let values{1:Objeto} = Object.values(${1:objeto})",],
		"description": "Funcion para sacar los valores del objeto"
	},

	"Yev entries": {
		"prefix": "ent",
		"body": ["let entries{1:Objeto} = Object.entries(${1:objeto})",
			"entries{1:Objeto}.forEach(([key, val]) => console.log[key, val])"
		],
		"description": "Funcion para sacar claves y valores del objeto"
	},

	//Manejo de fechas
	"Yev date": {
		"prefix": "dat",
		"body": ["new date(${1:año}${2:, }${3:mes}${4:, }${5:dia}) ${6: //Si no se le pasan argumentos devuelve la fecha de hoy}"
		],
		"description": "Funcion para poner fecha"
	},

	"Yev toDateString": {
		"prefix": ".tod",
		"body": [".toDateString${1: //para pasarlo a formato español es con toLocalDateString (snip = tolo)}"
		],
		"description": "Funcion poner fecha en formato corto"
	},
	"Yev toLocalDateString": {
		"prefix": ".tolo",
		"body": [".toLocalDateString(${1:'es-ES'}, ${2:formato})"
		],
		"description": "Funcion poner fecha al formato del pais"
	},

	"Yev getDate": {
		"prefix": ".getd",
		"body": [".getDate()"
		],
		"description": "Funcion sacar el día"
	},
	
	//Math
	"Yev min-max": {
		"prefix": "min",
		"body": ["let min = ${1};",
			"let max = ${2};"
		],
		"description": "Funcion random"
	},
	"Yev random": {
		"prefix": "ran",
		"body": ["Math.ceil(Math.floor()*(${1:max} - ${2:min} + 1) + ${2:min}) ${3: //Para declarar min max var -> sip = min}"
		],
		"description": "Funcion random"
	},

	"Yev ceil": {
		"prefix": "cei",
		"body": ["Math.ceil(${1})"
		],
		"description": "Funcion para rendondear num hacia arriba"
	},

	"Yev floor": {
		"prefix": "floo",
		"body": ["Math.floor(${1})"
		],
		"description": "Funcion para rendondear num hacia abajo"
	},

	"Yev round": {
		"prefix": "rou",
		"body": ["Math.round(${1})"
		],
		"description": "Funcion para rendondear num a entero"
	},

	"Yev sqrt": {
		"prefix": "sqr",
		"body": ["Math.sqrt(${1})"
		],
		"description": "Funcion para sacar raiz cuadrada"
	},

	"Yev pow": {
		"prefix": "pow",
		"body": ["Math.pow(${1:base}, ${2:exponente})"
		],
		"description": "Funcion para sacar exponencial"
	},

	"Yev abs": {
		"prefix": "abs",
		"body": ["Math.abs(${1})"
		],
		"description": "Funcion para sacar valor absoluto"
	},
	
	"Yev PI": {
		"prefix": "pi",
		"body": ["Math.PI"
		],
		"description": "Funcion para sacar PI"
	},

	"Yev cos": {
		"prefix": "cos",
		"body": ["Math.cos(${1})"
		],
		"description": "Funcion para sacar coseno"
	},
	
	//Informativas
	"Yev setTimeout": {
		"prefix": "sett",
		"body": ["setTimeout(() => {",
			"\t${2://Instrucción; }",
			"}, ${1:miliSec});"
		],
		"description": "Funcion para poner un tiempo de espera"
	},

	//Creación
	"Yev function": {
		"prefix": "fun",
		"body": ["function ${1}(${2}){",
			"\t${3:// Instrucción}",
			"}"
		],
		"description": "Creación función"
	},

	"Yev ;(()=>{})();": {
		"prefix": "(())",
		"body": ["(() => {",
			"\t${1://Instrucción}",
		"})();${2}",
		],
		"description": "Creación función auto-ejecutable"
	},



//!Control de flujo
	"Yev if": {
		"prefix": "if",
		"body": ["if(${1}){",
			"\t${2:;}",
			"}",
		],
		"description": "Control de flujo if"
	},
	"Yev ifElse": {
		"prefix": "ife",
		"body": ["if(${1}){",
			"\t${2:;}",
			"} else {",
			"\t${3:;}",
			"}",
		],
		"description": "Control de flujo if else"
	},
	"Yev else": {
		"prefix": "els",
		"body": ["else{",
			"\t${1:// Instrucción};",
			"}",
		],
		"description": "Control de flujo else"
	},
	"Yev elseIf": {
		"prefix": "else if",
		"body": ["else if(${1}){",
			"\t${2:// Instrucción};",
			"}",
		],
		"description": "Control de flujo if else"
	},
	"Yev SwitchCase": {
		"prefix": "swi",
		"body": ["switch (${1}) {",
			"\tcase ${2}:",
			"\t\t${3:// Instrucción};",
			"\t\tbreak;",
			"\tcase ${4}:",
			"\t\t${5:// Instrucción};",
			"\t\tbreak;",
			"\tdefault:",
			"\t\t${6:// Instrucción};",
			"}",
		],
		"description": "Control de flujo switch case"
	},
	"Yev for": {
		"prefix": "for",
		"body": ["for(let ${1} = ${2}; ${1}${3} ; ${1}${4}) {",
			"\t${5:// Instrucción};",
			"}",
		],
		"description": "Control de flujo for"
	},
	"Yev for i": {
		"prefix": "fori",
		"body": ["for(let $i = ${1}; $i${2} ; $i${3}) {",
			"\t${4:// Instrucción};",
			"}",
		],
		"description": "Control de flujo fori"
	},
	"Yev for j": {
		"prefix": "forj",
		"body": ["for(let $j = ${1}; $j${2} ; $j${3}) {",
			"\t${4:// Instrucción};",
			"}",
		],
		"description": "Control de flujo forj"
	},
	"Yev for Array": {
		"prefix": "fora",
		"body": ["for(let $i = ${1}; $i < ${2:Array}.length; $i++) {",
			"\t${3:// Instrucción};",
			"}",
		],
		"description": "Control de flujo fora"
	},

	"Yev for Object": {
		"prefix": "foro",
		"body": ["for(let key in {1:Objeto}){console.log(key, obj[key])}",
		],
		"description": "Funcion para sacar claves y valores del objeto"
	},

	"Yev while": {
		"prefix": "whi",
		"body": ["while(${1:condicion}){",
			"\t${2:// Instrucción};",
			"}",
		],
		"description": "Control de flujo while"
	},
	"Yev doWhile": {
		"prefix": "do",
		"body": ["do{",
			"\t${1:// Instrucción};",
			"}while(${2:condicion})",
		],
		"description": "Control de flujo do while"
	},

	"Yev foreach": {
		"prefix": ".for",
		"body": [".forEach(${1:element} => ${2});",
		],
		"description": "Control de flujo forecach"
	},
	"Yev tryCatch": {
		"prefix": "tr",
		"body": ["try{",
			"\t${1}",
			"} catch (error){",
			"\tconsole.error(error); //Imprimimos el error",
			"}",
		],
		"description": "Control de flujo try catch"
	},
	"Yev tryCatchFinally": {
		"prefix": "try",
		"body": ["try{",
			"\t${1}",
			"} catch (error){",
			"\tconsole.error(error); //Imprimimos el error",
			"}finally{",
			"\t${2:// Instrucción}",
			"}",
		],
		"description": "Control de flujo Try Catch finally"
	},
	
//!Variables
	"Yev Var": {
		"prefix": "v",
		"body": ["var ${1} = ${2}",
			"${3}",
		],
		"description": "Variable var"
	},
	"Yev Let": {
		"prefix": "l",
		"body": ["let ${1} = ${2}",
			"${3}",
		],
		"description": "Variable let"
	},

	"Yev Const": {
		"prefix": "c",
		"body": ["const ${1} = ${2}",
			"${3}",
		],
		"description": "Variable let"
	},

	"Yev Array": {
		"prefix": "arr",
		"body": ["new Array(${1})",
			"${3}",
		],
		"description": "Variable Array"
	},

//!Operadores
	"Yev = () => {": {
		"prefix": "=",
		"body": ["= () => {"],
		"description": "Operador () => {"
	},

	"Yev ==": {
		"prefix": "==",
		"body": [" == ${1}"],
		"description": "Operador =="
	},
	"Yev ===": {
		"prefix": "===",
		"body": [" === ${1}"],
		"description": "Operador ==="
	},
	"Yev !=": {
		"prefix": "!=",
		"body": [" != ${1}"],
		"description": "Operador !="
	},
	"Yev !==": {
		"prefix": "!==",
		"body": [" !== ${1}"],
		"description": "Operador !=="
	},
	"Yev >": {
		"prefix": ">",
		"body": [" > ${1}"],
		"description": "Operador >"
	},
	"Yev >=": {
		"prefix": ">=",
		"body": [" >= ${1}"],
		"description": "Operador >="
	},
	"Yev <": {
		"prefix": "<",
		"body": [" < ${1}"],
		"description": "Operador <"
	},
	"Yev +=": {
		"prefix": "+=",
		"body": [" += ${1}"],
		"description": "Operador +="
	},
	"Yev -=": {
		"prefix": "-=",
		"body": [" -= ${1}"],
		"description": "Operador -="
	},
	"Yev *=": {
		"prefix": "*=",
		"body": [" *= ${1}"],
		"description": "Operador *="
	},
	"Yev /=": {
		"prefix": "/=",
		"body": [" /= ${1}"],
		"description": "Operador /="
	},
	"Yev %=": {
		"prefix": "%=",
		"body": [" %= ${1}"],
		"description": "Operador %="
	},
	"Yev <=": {
		"prefix": "<=",
		"body": [" <= ${1}"],
		"description": "Operador <="
	},
	"Yev +": {
		"prefix": "+",
		"body": [" + ${1}"],
		"description": "Operador +"
	},
	"Yev -": {
		"prefix": "-",
		"body": [" - ${1}"],
		"description": "Operador -"
	},
	"Yev *": {
		"prefix": "*",
		"body": [" * ${1}"],
		"description": "Operador *"
	},
	"Yev /": {
		"prefix": "/",
		"body": [" / ${1}"],
		"description": "Operador /"
	},
	"Yev &&": {
		"prefix": "&",
		"body": [" && ${1}"],
		"description": "Operador && (And)"
	},
	"Yev ||": {
		"prefix": "|",
		"body": [" || ${1}"],
		"description": "Operador || (Or)"
	},

}